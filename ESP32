<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ESP32 Motor and Servo Control</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" integrity="sha384-0evSXbIWVMQvAuqUonldTlfzOLRgfmgyTybsOCsjQ9p/qIkYv4i590vQ4UeLWvW3" crossorigin="anonymous">
  <style>
    #joystick {
      width: 200px;
      height: 200px;
      border: 1px solid #ccc;
      border-radius: 50%;
      position: relative;
      margin: 0 auto;
    }
    #joystick .thumb {
      width: 50px;
      height: 50px;
      border: 1px solid #000;
      border-radius: 50%;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="container mt-4">
    <div class="row">
      <div class="col-md-6">
        <h3>Motor Speed</h3>
        <input type="range" class="form-control" id="motorSpeedSlider" min="0" max="255" value="128" oninput="sendMotorSpeed()">
      </div>
      <div class="col-md-6">
        <h3>Servo Angle</h3>
        <div id="joystick">
          <div class="thumb" id="joystickThumb"></div>
        </div>
      </div>
    </div>
  </div>

  <script>
    const speedSlider = document.getElementById('motorSpeedSlider');
    const joystick = document.getElementById('joystick');
    const joystickThumb = document.getElementById('joystickThumb');

    let joystickX = 0; // Store current joystick X position

    joystick.addEventListener('mousedown', startDrag);
    joystick.addEventListener('touchstart', startDrag);

    joystick.addEventListener('mouseup', stopDrag);
    joystick.addEventListener('touchend', stopDrag);

    function startDrag(event) {
      event.preventDefault(); // Prevent default behavior (text selection)
      document.addEventListener('mousemove', moveJoystick);
      document.addEventListener('touchmove', moveJoystick);
    }

    function stopDrag() {
      document.removeEventListener('mousemove', moveJoystick);
      document.removeEventListener('touchmove', moveJoystick);
      joystickX = 0; // Reset joystick position
      sendServoAngle(joystickX); // Send neutral position (center)
    }

    function moveJoystick(event) {
      const joystickOffset = joystick.getBoundingClientRect();
      let clickX;

      if (event.type === 'touchmove') {
        clickX = event.touches[0].clientX;
      } else {
        clickX = event.clientX;
      }

      joystickX = Math.max(0, Math.min(joystick.offsetWidth, clickX - joystickOffset.left));
      const joystickY = Math.max(0, Math.min(joystick.offsetHeight, event.clientY - joystickOffset.top));

      // Calculate servo angle based on joystick X position
      // (Adjust this logic based on your desired servo range)
      const servoAngle = map(joystickX, 0, joystick.offsetWidth, -90, 90); // Example mapping for -90 to 90 degrees

      joystickThumb.style.left = `${joystickX}px`;
      sendServoAngle(servoAngle);
    }

    function map(value, inMin, inMax, outMin, outMax) {
      return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
    }
